#!/usr/bin/env python3
"""
Test script to verify the fixed Force Grid implementation
"""

def test_force_grid_fixed():
    """Test that the fixed Force Grid implementation is properly integrated"""
    try:
        print("Testing fixed Force Grid implementation...")
        
        # Check if the new Force Grid file exists
        try:
            with open('extensions/force_grid_fixed.py', 'r') as f:
                force_grid_content = f.read()
            print("‚úÖ Force Grid fixed implementation file exists")
        except FileNotFoundError:
            print("‚ùå FAIL: Force Grid fixed implementation file not found")
            return False
        
        # Check for key components in the Force Grid implementation
        force_grid_checks = [
            'class ForceGridSampler',
            'def _apply_grid_to_latent',
            'def _apply_frequency_emphasis',
            'def _apply_phase_shift',
            'def _apply_amplitude_modulation',
            'force_grid_sampler = ForceGridSampler()'
        ]
        
        missing_components = []
        for check in force_grid_checks:
            if check not in force_grid_content:
                missing_components.append(check)
        
        if missing_components:
            print(f"‚ùå FAIL: Missing Force Grid components:")
            for missing in missing_components:
                print(f"  - {missing}")
            return False
        
        print("‚úÖ PASS: All Force Grid components are present")
        
        # Check integration in default_pipeline.py
        try:
            with open('modules/default_pipeline.py', 'r') as f:
                pipeline_content = f.read()
        except FileNotFoundError:
            print("‚ùå FAIL: default_pipeline.py not found")
            return False
        
        # Check for integration code
        integration_checks = [
            'force_grid_fixed',
            'force_grid_sampler',
            'grid_size = grid_size',
            'grid_strength = grid_strength',
            'activate()',
            'deactivate()'
        ]
        
        missing_integration = []
        for check in integration_checks:
            if check not in pipeline_content:
                missing_integration.append(check)
        
        if missing_integration:
            print(f"‚ùå FAIL: Missing Force Grid integration:")
            for missing in missing_integration:
                print(f"  - {missing}")
            return False
        
        print("‚úÖ PASS: Force Grid integration is complete")
        
        # Check for proper variable handling
        if 'force_grid_active = False' not in pipeline_content:
            print("‚ùå FAIL: Missing force_grid_active variable initialization")
            return False
        
        print("‚úÖ PASS: Force Grid variable handling is correct")
        
        return True
        
    except Exception as e:
        print(f"‚ùå FAIL: Error testing Force Grid: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_force_grid_algorithms():
    """Test the Force Grid transformation algorithms"""
    print("\nTesting Force Grid algorithms...")
    
    # Test grid size calculations
    test_cases = [
        (512, 512, (2, 2), 0.2),    # Small image
        (768, 768, (2, 2), 0.3),    # Medium image  
        (1024, 1024, (3, 3), 0.4),  # Large image
        (1536, 1024, (3, 3), 0.4),  # Wide image
    ]
    
    for width, height, expected_grid, expected_strength_range in test_cases:
        print(f"  Testing {width}x{height}: Expected grid {expected_grid}")
        
        # The logic from the pipeline
        if width >= 1024 and height >= 1024:
            grid_size = (3, 3)
            grid_strength = 0.4
        elif width >= 768 or height >= 768:
            grid_size = (2, 2)
            grid_strength = 0.3
        else:
            grid_size = (2, 2)
            grid_strength = 0.2
        
        if grid_size == expected_grid:
            print(f"    ‚úÖ Grid size correct: {grid_size}")
        else:
            print(f"    ‚ùå Grid size incorrect: got {grid_size}, expected {expected_grid}")
            return False
    
    print("‚úÖ PASS: All grid size calculations are correct")
    return True

if __name__ == "__main__":
    success1 = test_force_grid_fixed()
    success2 = test_force_grid_algorithms()
    
    if success1 and success2:
        print("\nüéâ Force Grid fixed implementation test passed!")
        print("\nWhat the new Force Grid does:")
        print("1. ‚úÖ Patches the sampling function (not UNet forward)")
        print("2. ‚úÖ Applies grid transformations to latent space")
        print("3. ‚úÖ Uses frequency domain effects for distinct patterns")
        print("4. ‚úÖ Adaptive strength based on timestep")
        print("5. ‚úÖ Different patterns per grid cell:")
        print("   - High frequency emphasis")
        print("   - Low frequency emphasis") 
        print("   - Phase shifts")
        print("   - Amplitude modulation")
        print("\nThis should create visible grid-like patterns in generated images!")
    else:
        print("\n‚ùå Force Grid fixed implementation test failed.")
        print("The implementation needs additional fixes.")